using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

//sorry i didnt take to much notes 
class CodeWars
{
    //counts all lower case letters
    public static int LowercaseCountCheck(string s)
    {
        int upperCaseCount = 0;
        char[] letters = s.ToCharArray();
        foreach (char letter in letters)
        {
            if (Char.IsLower(letter))
                upperCaseCount++;
        }
        return s.Count(char.IsUpper);

    }
    //adds up all the digits
    public static int SumDigits(int number)
    {
        int sum = 0;

        String numberStr = number.ToString();
        Console.WriteLine("string:  " + numberStr);
        char[] digits = numberStr.ToCharArray(0, numberStr.Length);
        foreach (var digit in digits)
        {
            sum += digit;
            Console.WriteLine(sum);
        }

        return sum;

    }
    // something about a watermelon i forgot
    public static bool Divide(int weight)
    {
        if (weight % 2 == 0 && weight != 2) return true;
        return false;
        // return weight > 2 && weight % 2 == 0;
    }
    //checks wether a given number is even or odd
    public static string EvenOrOdd(int number)
    {
        if (number % 2 == 0)
            return "Even";
        else
            return "Odd";
    }
    
    // not figgured out myself
    //figres out the current century
    public static int Ð¡enturyFromYear(int year) => (year + 99) / 100;
    public static int PositiveSum(int[] arr)
    {
        int sum = 0;
        foreach (int num in arr)
            if (num >= 0)
                sum += num;
        return sum;
    }
    // returns the opposite value
    public static int Opposite(int number)
    {
        if (number > 0)
            return number = -number * 2;
        if (number < 0)
            return number = +number * 2;
        else
            return number;
        // better way return -number
    }
    //draws stairs a given amount of time
    public static string DrawStairs(int numOfStairs)
    {
        string blank = " ";
        string stairCase = "";
        string stair = "I";
        for (int i = 1; i <= numOfStairs; i++)
        {
            if (i != 1)
                stair = blank + stair;
            if (i != numOfStairs)
                stairCase += stair + "\n";
            else
                stairCase += stair;
        }

        return stairCase;
    }
    // calculates tips bassed on waiter rating
    public static int CalculateTip(double amount, string rating)
    {
        rating = rating.ToUpper();
        double percentage = 0;
        switch (rating)
        {
            case "TERRIBLE":
                percentage = .0;
                break;
            case "POOR":
                percentage = .05;
                break;
            case "GOOD":
                percentage = .10;
                break;
            case "GREAT":
                percentage = .15;
                break;
            case "EXCELLENT":
                percentage = .20;
                break;
            default:
                return -1;
        }
        percentage = (amount / percentage) / 100;
        int tip = Convert.ToInt32(Math.Round(percentage, 0, MidpointRounding.AwayFromZero));
        return tip;
    }
    //repeats a string a given amount of times
    public static string repeatStr(int n, string s)
    {
        for (int i = 0; i <= n; i++)
            Console.WriteLine(s);
        return "";
    }
    // counting sheep in a bool array
    public static int CountSheeps(bool[] sheeps)
    {
        return sheeps.Count(s => false);

    }
    //turns a bool into a string
    public static string boolToWord(bool word) => word ? "Yes" : "No";
    //Purely thearetical
    //checks if your car could make it to the pump 
    public static bool ZeroFuel(uint distanceToPump, uint mpg, uint fuelLeft) => mpg * fuelLeft >= distanceToPump;
    //returns the count of all the posible divisors of a given int
    public static int Divisors(int n)
    {
        int c = 0;
        for (int i = 1; i <= n; i++)
        {
            if (n % i == 0)
                c++;
        }
        return c;
    }
    //finds the shortest word in string
    public static int FindShort(string s)
    {
        return s.Split(' ').Min(x => x.Length);
    }
    // only works for positive
    //squres every digit and returns as a int
    public static int SquareDigits(int n)
    {
        string result = "";
        foreach (Char c in n.ToString())
        {
            int num = Convert.ToInt32(c.ToString());
            result += num * num;
        }
        return Convert.ToInt32(result);

    }
    // finds all matching ints in a array
    public static int[] FindAll(int[] array, int n)
    {
        List<int> locations = new List<int>();
        for (int i = 0; i < array.Length; ++i)
        {
            if (array[i] == n) locations.Add(i);
        }
        return locations.ToArray();
    }
    // tuff stuff couldnt figure it out, ill get back to it
    //checks to see if the number is ballenced (same digits) on both sides of middle
    public static string BalancedNumber(int number)
    {
        string output = "";

        List<char> numList = number.ToString().ToList<char>();

        if (numList.Count % 2 == 0) numList.RemoveRange(numList.Count / 2- 1, 2);
        else numList.RemoveAt(numList.Count / 2 );
      
            foreach (var digit in numList)
            {
            List<char> doubles = numList.FindAll(sames => sames == digit);
            if (doubles.Count % 2 != 0 || doubles.Count == 1)
                return "Not Balanced";
            }
        return "Balanced";
    }
    // use && more super usefull
    //checks wether for each negitive thers a positive
    public static bool IsZeroBalanced(List<int> xs) => xs.Sum() == 0 && xs.Count(x => xs.Contains(-x)) == xs.Count && xs.Count!= 0? true : false;
    // 1/22/2020
    //not my best work
    // studering machine
    public static String Accum(string word)
    {
        string studder = "";
        int letNum = 0;
        foreach (var Lletter in word)
        {
            studder += Lletter.ToString().ToUpper();
            for (int i = 0; i < letNum; i++)
                studder += Lletter;
            studder += "-";
            letNum++;
        }
        return studder.Remove(studder.LastIndexOf("-"), 1);
    }
}
